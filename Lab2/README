Name:Ajit Pandey
USC NetID:ajitpand
CSCI 455 Fall 2019
Lab 4

Note: On-campus students can put their answers to the lab questions in this file, or use a piece of paper they can show to their lab TA.  DEN students will need to put their answers in this README, so they will get submitted.


1. It is important to write the program using an iterative incremental process. Compiling and running after each step. Errors are easier to find with this approach. Constructor in java is a special type of method which is used to initialize the object. Constructor is very powerful tool in java. You can quickly check if object is initialized correctly by firing the constructor. Accessor methods are useful in encapsulating and making future changes easier. Additional functionality to program can be added easily. It also helps isolating public interface from inadvertent changes. Accessor methods provides different level of access: protected, public, private etc.

2.1 
nums.in =(3 -7 10 17 9 -17  17 21 18 7)  
expected minimum value of nums: -17
test1.in = ()
expected minimum value of nums: INTEGER.MAX_VALUE
test2.in =(0 23 -32 46 57 0 -59)
expected minimum value of nums: -59

Results:
Min value of nums: -17
Min value of nums: 2147483647 
Min value of nums: -59 


2.2
example 1: test4.in - I created file with doubles and strings. it returned minimum value same as INETGER.MAX_VALUE for empty array.
example 2: test5.in - if file has INETGER.MAX_VALUE as array elements, it will show mimimum value as empty array.

Results:
example 1: 
Min value of nums: 2147483647 

example 2: 
Min value of nums: 2147483647  

3.1
for nums.in
                                                                                                                           
testFilter(nums, 10) -Values greater than 10: (17 17 21 18)                                                                                       testFilter(nums, -20) -Values greater than -20:(3 -7 10 17 9 -17  17 21 18 7)
testFilter(nums,-17) -Values greater than -17:(3 -7 10 17 9 17 21 18 7)
testFilter(nums, 21) -Values greater than 21: ()
                                                                                                                                                   for test1.in
testFilter(nums, 10) -Values greater than 10: ()                                                                                       testFilter(nums, -20) -Values greater than -20:()
testFilter(nums,-17) -Values greater than -17:()
testFilter(nums, 21) -Values greater than 21: ()


for test2.in
testFilter(nums, 10) -Values greater than 10: (23 46 57)                                                                                       testFilter(nums, -20) -Values greater than -20:(0 23 46 57 0)
testFilter(nums,-17) -Values greater than -17:(0 23 46 57 0)
testFilter(nums, 21) -Values greater than 21: (23 46 57)

Results:
nums.in
------------ testing valuesGT --------------                                                                                                                                  
Values greater than 10: (17 17 21 18)                                                                                                                                                                                                                                             
Values greater than -20: (3 -7 10 17 9 -17 17 21 18 7)                                                                                                                                                                                                                              
Values greater than -17: (3 -7 10 17 9 17 21 18 7)                                                                                                                                                                                                                                  
Values greater than 21: ()   

test1.in
------------ testing valuesGT --------------                                                                                                                                  
Values greater than 10: ()                                                                                                                             
Values greater than -20: ()                                                                                                                                                                                                                                                       
Values greater than -17: ()                                                                                                                        
Values greater than 21: ()     

test2.in
------------ testing valuesGT --------------                                                                                                       
Values greater than 10: (23 46 57)                                                                                                                 
Values greater than -20: (0 23 46 57 0)                                                                                                                                                                                       
Values greater than -17: (0 23 46 57 0)                                                                                                           
Values greater than 21: (23 46 57)                                                                                                                 


3.2
test3.in = (-21 -16 0 6 8 20 21)
testFilter(nums, 21) code will check a boundary condition when all elements of array are smaller than 21. 
testFilter(nums, 21) will return (), empty array.

Result:
------------ testing valuesGT --------------                                                                                                                                  
Values greater than 21: ()                                                                                                                         

4.1
test6.in - when array has string or double where inhasNext() will stop reading the file. I created a file tets6.in to execute this.

4.2
(nums.valuesGT(threshold)).printVals();

4.3
Nums

4.4
   Nums numTest = nums.valueGT(threshold);
   numTest.printVals();

4.5
  - If there are many add/remove elements from array, ArrayList will be less efficient. This will force arraylist to adjust the elements present in the list.
  - If you collect a long sequence of primitive type values and you are concerned about efficiency, use an array. Arraylist does not work with primitive values.

4.6
An array list offers two significant advantages:
 - Array lists can grow and shrink as needed.
 - The ArrayList class supplies methods for common tasks, such as inserting and removing elements.

4.7
1- no need to save. read while printing the numbers
2- no need to save except minimum value.
3- no need to save except minimum value.
4- no need to save except threshold number
5 - save to compare to threshold.
6. save the data